pipeline{
    agent any
    environment {
    PATH = "/opt/sonar/bin:/opt/maven/bin:$PATH"
    registryCredential = 'demoecrid'
    }
        stages{
        
        stage('Build'){
            steps{
                echo 'Building Okay..'
                sh "whoami"
                sh "echo $PATH"
                //echo 'Workspace is..'
                //sh  "echo $WORKSPACE"
                sh 'mvn -f demo/pom.xml clean package -X'
                /*sh "docker build . -t demo:${env.BUILD_ID}"*/
                sh "docker build . -f demo/Dockerfile -t demo:${env.BUILD_ID}"
            }
        }
    
    stage('Docker Push'){
     steps{
    			//sh "docker.withRegistry('https://358493496165.dkr.ecr.ap-southeast-1.amazonaws.com/uploadfille', 'ecr:us-east-1:demoecrid') {docker.image('demo').push('latest')"
    
         script {
         
          //docker.withRegistry('https://358493496165.dkr.ecr.ap-southeast-1.amazonaws.com/uploadfille', 'ecr:demoecrid') {docker.image('demo').push('latest')}
          //docker.withRegistry('https://358493496165.dkr.ecr.ap-southeast-1.amazonaws.com/uploadfille', registryCredential) {docker.image('demo').push('latest')}
          //
          docker.withRegistry('https://358493496165.dkr.ecr.ap-southeast-1.amazonaws.com/uploadfille', 'ecr:demoecrid') {docker.image('demo').push('latest')}
         
         }
    
    	}
    
    }
    
    
    
    //
    /*** start only if needed due to cost
    stage('Sonarqube') {
    						environment {
       							 scannerHome = tool 'localSonar'
   								 		}
    					steps {
        						withSonarQubeEnv('aws_sonarqube') {
            					sh "${scannerHome}/sonar-scanner"
       											 }
       							 timeout(time: 10, unit: 'MINUTES') {
            					waitForQualityGate abortPipeline: true
        					}
   						 }
}
    **/
    //
    
    
		}

		post {
      			always {
        			junit '**/target/surefire-reports/*.xml'
      				}
      		 }


}